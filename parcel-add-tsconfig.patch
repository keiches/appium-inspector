Index: node_modules/parcel-bundler/lib/assets/TypeScriptAsset.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/parcel-bundler/lib/assets/TypeScriptAsset.js b/node_modules/parcel-bundler/lib/assets/TypeScriptAsset.js
--- a/node_modules/parcel-bundler/lib/assets/TypeScriptAsset.js	
+++ b/node_modules/parcel-bundler/lib/assets/TypeScriptAsset.js	
@@ -37,7 +37,8 @@
         },
         fileName: _this.relativeName
       };
-      let tsconfig = yield _this.getConfig(['tsconfig.json']); // Overwrite default if config is found
+      // let tsconfig = yield _this.getConfig(['tsconfig.json']); // Overwrite default if config is found
+      let tsconfig = yield _this.getConfig([_this.options.tsConfig]); // Overwrite default if config is found
 
       if (tsconfig) {
         transpilerOptions.compilerOptions = Object.assign(transpilerOptions.compilerOptions, tsconfig.compilerOptions);
@@ -68,4 +69,4 @@
 
 }
 
-module.exports = TypeScriptAsset;
\ No newline at end of file
+module.exports = TypeScriptAsset;
Index: node_modules/parcel-bundler/lib/cli.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/parcel-bundler/lib/cli.js b/node_modules/parcel-bundler/lib/cli.js
--- a/node_modules/parcel-bundler/lib/cli.js	
+++ b/node_modules/parcel-bundler/lib/cli.js	
@@ -17,7 +17,7 @@
 program.version(version).usage('<command> [options]');
 program.command('serve [input...]').description('starts a development server').option('-p, --port <port>', 'set the port to serve on. defaults to 1234', parseInt).option('--host <host>', 'set the host to listen on, defaults to listening on all interfaces').option('--hmr-port <port>', 'set the port to serve HMR websockets, defaults to random', parseInt).option('--hmr-hostname <hostname>', 'set the hostname of HMR websockets, defaults to location.hostname of current window').option('--https', 'serves files over HTTPS').option('--cert <path>', 'path to certificate to use with HTTPS').option('--key <path>', 'path to private key to use with HTTPS').option('--open [browser]', 'automatically open in specified browser, defaults to default browser').option('-d, --out-dir <path>', 'set the output directory. defaults to "dist"').option('-o, --out-file <filename>', 'set the output filename for the application entry point.').option('--public-url <url>', 'set the public URL to serve on. defaults to "/"').option('--global <variable>', 'expose your module through a global variable').option('--no-hmr', 'disable hot module replacement').option('--no-cache', 'disable the filesystem cache').option('--no-source-maps', 'disable sourcemaps').option('--no-autoinstall', 'disable autoinstall').option('-t, --target [target]', 'set the runtime environment, either "node", "browser" or "electron". defaults to "browser"', /^(node|browser|electron)$/).option('--bundle-node-modules', 'force bundling node modules, even on node/electron target').option('-V, --version', 'output the version number').option('--log-level <level>', 'set the log level, either "0" (no output), "1" (errors), "2" (warnings), "3" (info), "4" (verbose) or "5" (debug, creates a log file).', /^([0-5])$/).option('--cache-dir <path>', 'set the cache directory. defaults to ".cache"').action(bundle);
 program.command('watch [input...]').description('starts the bundler in watch mode').option('-d, --out-dir <path>', 'set the output directory. defaults to "dist"').option('-o, --out-file <filename>', 'set the output filename for the application entry point.').option('--public-url <url>', 'set the public URL to serve on. defaults to "/"').option('--global <variable>', 'expose your module through a global variable').option('--hmr-port <port>', 'set the port to serve HMR websockets, defaults to random', parseInt).option('--hmr-hostname <hostname>', 'set the hostname of HMR websockets, defaults to location.hostname of current window').option('--https', 'listen on HTTPS for HMR connections').option('--cert <path>', 'path to certificate to use with HTTPS').option('--key <path>', 'path to private key to use with HTTPS').option('--no-hmr', 'disable hot module replacement').option('--no-cache', 'disable the filesystem cache').option('--no-source-maps', 'disable sourcemaps').option('--no-autoinstall', 'disable autoinstall').option('-t, --target [target]', 'set the runtime environment, either "node", "browser" or "electron". defaults to "browser"', /^(node|browser|electron)$/).option('--bundle-node-modules', 'force bundling node modules, even on node/electron target').option('--log-level <level>', 'set the log level, either "0" (no output), "1" (errors), "2" (warnings), "3" (info), "4" (verbose) or "5" (debug, creates a log file).', /^([0-5])$/).option('--cache-dir <path>', 'set the cache directory. defaults to ".cache"').action(bundle);
-program.command('build [input...]').description('bundles for production').option('-d, --out-dir <path>', 'set the output directory. defaults to "dist"').option('-o, --out-file <filename>', 'set the output filename for the application entry point.').option('--public-url <url>', 'set the public URL to serve on. defaults to "/"').option('--global <variable>', 'expose your module through a global variable').option('--no-minify', 'disable minification').option('--no-cache', 'disable the filesystem cache').option('--no-source-maps', 'disable sourcemaps').option('--no-autoinstall', 'disable autoinstall').option('--no-content-hash', 'disable content hashing').option('--experimental-scope-hoisting', 'enable experimental scope hoisting/tree shaking support').option('-t, --target <target>', 'set the runtime environment, either "node", "browser" or "electron". defaults to "browser"', /^(node|browser|electron)$/).option('--bundle-node-modules', 'force bundling node modules, even on node/electron target').option('--detailed-report [depth]', 'print a detailed build report after a completed build. If enabled, defaults to depth "10"', /^([0-9]+|all)$/).option('--log-level <level>', 'set the log level, either "0" (no output), "1" (errors), "2" (warnings), "3" (info), "4" (verbose) or "5" (debug, creates a log file).', /^([0-5])$/).option('--cache-dir <path>', 'set the cache directory. defaults to ".cache"').action(bundle);
+program.command('build [input...]').description('bundles for production').option('-tc, --ts-config <filename>', 'set the tsconfig.json filename for the typescript generation.').option('-d, --out-dir <path>', 'set the output directory. defaults to "dist"').option('-o, --out-file <filename>', 'set the output filename for the application entry point.').option('--public-url <url>', 'set the public URL to serve on. defaults to "/"').option('--global <variable>', 'expose your module through a global variable').option('--no-minify', 'disable minification').option('--no-cache', 'disable the filesystem cache').option('--no-source-maps', 'disable sourcemaps').option('--no-autoinstall', 'disable autoinstall').option('--no-content-hash', 'disable content hashing').option('--experimental-scope-hoisting', 'enable experimental scope hoisting/tree shaking support').option('-t, --target <target>', 'set the runtime environment, either "node", "browser" or "electron". defaults to "browser"', /^(node|browser|electron)$/).option('--bundle-node-modules', 'force bundling node modules, even on node/electron target').option('--detailed-report [depth]', 'print a detailed build report after a completed build. If enabled, defaults to depth "10"', /^([0-9]+|all)$/).option('--log-level <level>', 'set the log level, either "0" (no output), "1" (errors), "2" (warnings), "3" (info), "4" (verbose) or "5" (debug, creates a log file).', /^([0-5])$/).option('--cache-dir <path>', 'set the cache directory. defaults to ".cache"').action(bundle);
 program.command('info').description('Prints debugging information about the local environment').action(function () {
   console.log(chalk.bold('\nEnvironment Info:'));
   envinfo.run({
@@ -91,4 +91,4 @@
     }
   });
   return _bundle.apply(this, arguments);
-}
\ No newline at end of file
+}
Index: node_modules/parcel-bundler/lib/Bundler.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/parcel-bundler/lib/Bundler.js b/node_modules/parcel-bundler/lib/Bundler.js
--- a/node_modules/parcel-bundler/lib/Bundler.js	
+++ b/node_modules/parcel-bundler/lib/Bundler.js	
@@ -157,7 +157,8 @@
       autoinstall: typeof options.autoInstall === 'boolean' ? options.autoInstall : process.env.PARCEL_AUTOINSTALL === 'false' ? false : !isProduction,
       scopeHoist: scopeHoist,
       contentHash: typeof options.contentHash === 'boolean' ? options.contentHash : isProduction,
-      throwErrors: typeof options.throwErrors === 'boolean' ? options.throwErrors : true
+      throwErrors: typeof options.throwErrors === 'boolean' ? options.throwErrors : true,
+      tsConfig: options.tsConfig || 'tsconfig.json'
     };
   }
 
@@ -1023,4 +1024,4 @@
 
 module.exports = Bundler;
 Bundler.Asset = require('./Asset');
-Bundler.Packager = require('./packagers/Packager');
\ No newline at end of file
+Bundler.Packager = require('./packagers/Packager');
Index: node_modules/parcel-bundler/src/cli.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/parcel-bundler/src/cli.js b/node_modules/parcel-bundler/src/cli.js
--- a/node_modules/parcel-bundler/src/cli.js	
+++ b/node_modules/parcel-bundler/src/cli.js	
@@ -121,6 +121,10 @@
 program
   .command('build [input...]')
   .description('bundles for production')
+  .option(
+    '-tc, --ts-config <filename>',
+    'set the tsconfig.json for the typescript generation.'
+  )
   .option(
     '-d, --out-dir <path>',
     'set the output directory. defaults to "dist"'
Index: node_modules/parcel-bundler/src/Bundler.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/parcel-bundler/src/Bundler.js b/node_modules/parcel-bundler/src/Bundler.js
--- a/node_modules/parcel-bundler/src/Bundler.js	
+++ b/node_modules/parcel-bundler/src/Bundler.js	
@@ -153,7 +153,8 @@
           ? options.contentHash
           : isProduction,
       throwErrors:
-        typeof options.throwErrors === 'boolean' ? options.throwErrors : true
+        typeof options.throwErrors === 'boolean' ? options.throwErrors : true,
+      tsConfig: options.tsConfig || 'tsconfig.json'
     };
   }
 
